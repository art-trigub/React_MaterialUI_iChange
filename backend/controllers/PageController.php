<?php

namespace backend\controllers;

use common\models\Contacts;
use Yii;
use common\models\Page;
use common\models\PageSearch;
use common\models\Language;
use backend\components\Controller;
use yii\helpers\ArrayHelper;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;
use yii\web\UploadedFile;

/**
 * PageController implements the CRUD actions for Page model.
 */
class PageController extends Controller
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->topMenuItems = [
            ['label' => 'Actions', 'url' => 'javascript:;', 'icon' => 'flaticon-add', 'items' => [
                ['label' => 'Add new Page', 'url' => ['page/create', 'category' => Yii::$app->request->get('category', '')], 'icon' => 'flaticon-file']
            ]]
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    public function actionMain()
    {
        $model = Page::getStaticByName('main');

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->refresh();
        }

        return $this->render('updateStatic', [
            'model' => $model,
            'langList' => Language::getList(),
        ]);
    }

    public function actionAbout()
    {
        $model = Page::getStaticByName('about');

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->refresh();
        }

        return $this->render('updateStatic', [
            'model' => $model,
            'langList' => Language::getList(),
        ]);
    }


    public function actionCurrencyOrder()
    {
        $model = Page::getStaticByName('currency-order');

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->refresh();
        }

        return $this->render('updateStatic', [
            'model' => $model,
            'langList' => Language::getList(),
        ]);
    }

    public function actionContacts()
    {
        $model = Contacts::getModel();
        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->refresh();
        }

        return $this->render('contacts', [
            'model' => $model,
            'langList' => Language::getList(),
        ]);
    }

    /**
     * Lists all Page models.
     * @return mixed
     */
    public function actionIndex()
    {
        $pages = (new Page)->getPagesList();

        return $this->render('index', [
            'pages' => $pages,
            'langList' => Language::getList(),
        ]);
    }

    public function actionTree($category=false)
    {
        $pages = (new Page)->getPagesList($category);

        return $this->render('index', [
            'pages' => $pages,
            'langList' => Language::getList(),
        ]);
    }

    /**
     * Displays a single Page model.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id, $category=null)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
            'langList' => Language::getList(),
        ]);
    }

    public function actionSort()
    {
        $sortElements = (array)Yii::$app->request->get('sortElements', []);
        $pages = ArrayHelper::index(Page::find()->where(['in', 'page_id', $sortElements])->all(), 'page_id');
        $count = count($sortElements);
        foreach($sortElements as $page_id) {
            if(isset($pages[$page_id])) {
                $pages[$page_id]->weight = $count--;
                $pages[$page_id]->save(false);
            }
        }
    }

    /**
     * Creates a new Page model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate($category = null)
    {
        $model = new Page();
        $model->category = $category;
        $model->type = Page::PAGE_TYPE_TREE;

        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            if($name = $model->uploadImage(UploadedFile::getInstance($model, 'imageFile'))) {
                $model->image = $name;
            }

            if($model->save()) {
                return $this->redirect(['view', 'id' => $model->page_id, 'category' => $category]);
            }
        }

        return $this->render('create', [
            'model' => $model,
            'langList' => Language::getList(),
        ]);
    }

    /**
     * Updates an existing Page model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id, $category=null)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            if($name = $model->uploadImage(UploadedFile::getInstance($model, 'imageFile')))
            {
                $model->deleteImages();
                $model->image = $name;
            } else if($model->deleteImage) {
                $model->deleteImages();
                $model->image = '';
            }

            if($model->save()) {
                return $this->redirect(['view', 'id' => $model->page_id, 'category' => $category]);
            }
        }

        return $this->render('update', [
            'model' => $model,
            'langList' => Language::getList(),
        ]);
    }

    /**
     * Deletes an existing Page model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the Page model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Page the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Page::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }
}
